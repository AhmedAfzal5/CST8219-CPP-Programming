// Image.h
#pragma once

class Image 
{
	int pixel_x;
	int pixel_y;
	int duration;
	char* name;
public:
	Image(int x, int y, int duration, char* name);
	Image(const Image&);
	~Image();
	friend ostream& operator<<(ostream&, Image&);
};

// GraphicElement.h
#pragma once

class GraphicElement 
{
	string fileName;
	vector<Image> Images;
public:
	GraphicElement::GraphicElement(string s, vector<Image> d) :fileName(s), Images(d){}
	GraphicElement operator+(GraphicElement&);
	friend ostream& operator<<(ostream&, GraphicElement&);
};

//RasterGraphic.h
#pragma once

class RasterGraphic 
{
	string name;
	forward_list<GraphicElement> GraphicElements;
public:
	RasterGraphic(string s): name(s){}
	void InsertGraphicElement();
	void DeleteGraphicElement();
	void Concatenate() // inline
	{
		cout << "Concatenating two GraphicElements" << endl;
		int index1 = -1, index2 = -1;
		RasterGraphic& A = *this;
		int count = distance(GraphicElements.begin(),GraphicElements.end());
		do {
			cout << "Please enter valid indexes of the two GraphicElements to concatenate (0 to " << count - 1 << ")" << endl;
			cin >> index1 >> index2;
		} while ((index1<0 || index1>count - 1) || (index2<0 || index2>count - 1));
		A += A[index1] + A[index2];
	}
	GraphicElement& operator[](unsigned int);
	void operator+=(GraphicElement&);
	friend ostream& operator<<(ostream& , RasterGraphic&);
};

// ass2.cpp
#define _CRT_SECURE_NO_WARNINGS
#define _CRTDBG_MAP_ALLOC	// need this to get the line identification
//_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF|_CRTDBG_LEAK_CHECK_DF); // in main, after local declarations
//NB must be in debug build
#include <crtdbg.h>
#include <iostream>
#include <string>
#include <vector>
#include <forward_list>
using namespace std;
#include "Image.h"
#include "GraphicElement.h"
#include "RasterGraphic.h"
bool running = true;

int main(void)
{
	char selection;
	bool running = true;
	RasterGraphic A("A");
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF); 
	while (running)
	{
		cout<<	"MENU\n 1. Insert a GraphicElement\n 2. Delete the first GraphicElements\n 3. Concatenate two GraphicElements\n 4. Run the RasterGraphic\n 5. Quit\n"<<endl;
		cin >> selection;
		switch (selection)
		{
		case '1':
			A.InsertGraphicElement();
			break;
		case '2':
			A.DeleteGraphicElement();
			break;
		case '3':
			A.Concatenate();
			break;
		case '4':
			cout << A << endl;
			break;
		case '5':
			running = false;
			break;
		default:
			break;
		}
	}
	return 0;
}

