// Image.h
#pragma once

class Image 
{
protected:
	int pixel_x;
	int pixel_y;
	int duration;
	char* name;	
public:
	Image(int x, int y, int duration, char* name);
	Image(const Image&);
	virtual ~Image()
	{
		if(name)
			delete[]name;
	}
	virtual int BufferSize() = 0;
	friend ostream& operator<<(ostream&, Image&);
};

#pragma once
//GPUMemoryImage.h

class GPUMemoryImage : public Image
{
	string shader;
public:
	GPUMemoryImage(int x, int y, int duration, char* name, string shader) :Image(x, y, duration, name), shader(shader) {};
	GPUMemoryImage(const GPUMemoryImage& RGPUMD) :shader(RGPUMD.shader), Image(RGPUMD) {}
	string GetShader() { return shader; }
	int BufferSize() { return pixel_x*pixel_y * sizeof(float); }
};

// SystemMemoryImage.h
#pragma once


class  SystemMemoryImage : public Image
{
public:
	SystemMemoryImage(int x, int y, int duration, char* name) :Image(x, y, duration, name) {};
	SystemMemoryImage(const SystemMemoryImage& RGMD) :Image(RGMD) {}
	int BufferSize(){return pixel_x*pixel_y * sizeof(double);}
};

// GraphicElement.h
#pragma once

class GraphicElement 
{
	string fileName;
	vector<Image*> Images;
public:
	GraphicElement(string s, vector<Image*> d) :fileName(s), Images(d){}
	GraphicElement(const GraphicElement&);
	~GraphicElement()
	{
		vector<Image*>::iterator it;
		for (it = Images.begin(); it != Images.end(); it++)
			delete *it;
	}
	friend ostream& operator<<(ostream&, GraphicElement&);
};

//RasterGraphic.h
#pragma once

class RasterGraphic 
{
	string name;
	forward_list<GraphicElement> GraphicElements;
public:
	RasterGraphic(string s): name(s){}
	void InsertGraphicElement();
	void DeleteGraphicElement();
	friend ostream& operator<<(ostream& , RasterGraphic&);
};


// ass3.cpp
#define _CRT_SECURE_NO_WARNINGS
#define _CRTDBG_MAP_ALLOC	// need this to get the line identification
//_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF|_CRTDBG_LEAK_CHECK_DF); // in main, after local declarations
//NB must be in debug build
#include <crtdbg.h>
#include <iostream>
#include <string>
#include <vector>
#include <forward_list>
using namespace std;

#include "Image.h"
#include "SystemMemoryImage.h"
#include "GPUMemoryImage.h"
#include "GraphicElement.h"
#include "RasterGraphic.h"

bool running = true;

int main(void)
{
	char selection;
	bool running = true;
	RasterGraphic A("A");
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF|_CRTDBG_LEAK_CHECK_DF);

	while (running)
	{
		cout<<	"MENU\n 1. Insert a GraphicElement\n 2. Delete the first GraphicElement\n 3. Run the RasterGraphic\n 4. Quit\n"<<endl;
		cin>>selection;

		switch (selection)
		{
		case '1':
			A.InsertGraphicElement();
			break;
		case '2':
			A.DeleteGraphicElement();
			break;
		case '3':
			cout << A << endl;
			break;
		case '4':
			running = false;
			break;
		default:
			break;
		}
	}
	return 0;
}




